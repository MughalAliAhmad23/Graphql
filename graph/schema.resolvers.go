package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"Gqlgen/controllers"
	"Gqlgen/db"
	"Gqlgen/dbmodels"
	"Gqlgen/graph/model"
	"context"
	"fmt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateJoke(ctx context.Context, input model.JokeInput) (*model.JokeResp, error) {

	joke := controllers.CreateNewJoke(input)

	return joke, nil
}

// Migration is the resolver for the migration field.
func (r *mutationResolver) Migration(ctx context.Context) (*model.Generated, error) {

	var migResp model.Generated

	migResp.Message = "Table has been generated!"

	err := db.DbConn.AutoMigrate(&dbmodels.Joke{})
	if err != nil {
		fmt.Println("Error in migration function is:", err)
	}

	return &migResp, nil
}

// Joke is the resolver for the joke field.
func (r *queryResolver) Joke(ctx context.Context, id string) (*model.JokeResp, error) {

	joke := controllers.GetAJoke(id)

	return joke, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Jokes(ctx context.Context) ([]*model.JokeResp, error) {

	jokes := controllers.GetAllJoke()

	return jokes, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
